import csv
import os
from typing import List, Dict, Any


class Product:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    
    def __init__(self, product_id: int, name: str, category: str, 
                 price: float, weight: float, description: str):
        self.id = product_id
        self.name = name
        self.category = category
        self.price = price
        self.weight = weight
        self.description = description
    
    def __str__(self):
        return (f"{self.name} | {self.category} | {self.price}‚ÇΩ | "
                f"{self.weight}–∫–≥ | {self.description}")
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'name': self.name,
            'category': self.category,
            'price': self.price,
            'weight': self.weight,
            'description': self.description
        }


class ProductManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    
    def __init__(self, csv_file: str = 'products.csv'):
        self.csv_file = csv_file
        self.products = self.load_products()
    
    def load_products(self) -> List[Product]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        products = []
        if not os.path.exists(self.csv_file):
            print("‚ùå –§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return products
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    product = Product(
                        product_id=int(row['Id']),
                        name=row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                        category=row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
                        price=float(row['–¶–µ–Ω–∞']),
                        weight=float(row['–í–µ—Å']),
                        description=row['–û–ø–∏—Å–∞–Ω–∏–µ']
                    )
                    products.append(product)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return products
    
    def display_products(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
        if not self.products:
            print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        print("\n" + "="*80)
        print("üè™ –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í –°–ü–û–†–¢–ò–í–ù–û–ì–û –ú–ê–ì–ê–ó–ò–ù–ê")
        print("="*80)
        for product in self.products:
            print(f"{product.id:2d}. {product}")
        print("="*80)


class Cart:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫"""
    
    def __init__(self):
        self.items: List[Product] = []
    
    def add_product(self, product: Product):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        self.items.append(product)
        print(f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
    
    def remove_product(self, product_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ ID"""
        for i, product in enumerate(self.items):
            if product.id == product_id:
                removed_product = self.items.pop(i)
                print(f"‚úÖ –¢–æ–≤–∞—Ä '{removed_product.name}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                return True
        print(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        return False
    
    def display_cart(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
        if not self.items:
            print("\nüõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        print("\n" + "="*80)
        print("üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö")
        print("="*80)
        total_price = 0
        total_weight = 0
        
        for i, product in enumerate(self.items, 1):
            print(f"{i:2d}. {product}")
            total_price += product.price
            total_weight += product.weight
        
        print("-"*80)
        print(f"–ò—Ç–æ–≥–æ: {len(self.items)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.2f}‚ÇΩ")
        print(f"–û–±—â–∏–π –≤–µ—Å: {total_weight:.2f}–∫–≥")
        print("="*80)
    
    def get_total_price(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        return sum(product.price for product in self.items)
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É"""
        self.items.clear()
        print("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")


class SortManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    
    @staticmethod
    def bubble_sort(items: List[Product], key: str, reverse: bool = False):
        """–ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"""
        n = len(items)
        for i in range(n):
            for j in range(0, n - i - 1):
                if SortManager._compare(items[j], items[j + 1], key, reverse):
                    items[j], items[j + 1] = items[j + 1], items[j]
    
    @staticmethod
    def insertion_sort(items: List[Product], key: str, reverse: bool = False):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏"""
        for i in range(1, len(items)):
            key_item = items[i]
            j = i - 1
            while j >= 0 and SortManager._compare(items[j], key_item, key, reverse):
                items[j + 1] = items[j]
                j -= 1
            items[j + 1] = key_item
    
    @staticmethod
    def quick_sort(items: List[Product], key: str, reverse: bool = False):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"""
        def _quick_sort(arr):
            if len(arr) <= 1:
                return arr
            pivot = arr[len(arr) // 2]
            left = [x for x in arr if SortManager._compare(x, pivot, key, not reverse)]
            middle = [x for x in arr if not SortManager._compare(x, pivot, key, not reverse) 
                     and not SortManager._compare(pivot, x, key, not reverse)]
            right = [x for x in arr if SortManager._compare(pivot, x, key, not reverse)]
            return _quick_sort(left) + middle + _quick_sort(right)
        
        sorted_items = _quick_sort(items)
        items.clear()
        items.extend(sorted_items)
    
    @staticmethod
    def merge_sort(items: List[Product], key: str, reverse: bool = False):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º"""
        def _merge_sort(arr):
            if len(arr) <= 1:
                return arr
            
            mid = len(arr) // 2
            left = _merge_sort(arr[:mid])
            right = _merge_sort(arr[mid:])
            
            return SortManager._merge(left, right, key, reverse)
        
        sorted_items = _merge_sort(items)
        items.clear()
        items.extend(sorted_items)
    
    @staticmethod
    def _merge(left: List[Product], right: List[Product], key: str, reverse: bool):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–∏—è–Ω–∏—è"""
        result = []
        i = j = 0
        
        while i < len(left) and j < len(right):
            if SortManager._compare(left[i], right[j], key, reverse):
                result.append(right[j])
                j += 1
            else:
                result.append(left[i])
                i += 1
        
        result.extend(left[i:])
        result.extend(right[j:])
        return result
    
    @staticmethod
    def _compare(product1: Product, product2: Product, key: str, reverse: bool) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É"""
        if key == 'price':
            value1, value2 = product1.price, product2.price
        elif key == 'weight':
            value1, value2 = product1.weight, product2.weight
        elif key == 'category':
            value1, value2 = product1.category, product2.category
        elif key == 'name':
            value1, value2 = product1.name, product2.name
        else:
            value1, value2 = product1.id, product2.id
        
        if reverse:
            return value1 < value2
        return value1 > value2


class ShopSimulator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    
    def __init__(self):
        self.product_manager = ProductManager()
        self.cart = Cart()
        self.sort_manager = SortManager()
    
    def display_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "=" * 40)
        print("üè™ –°–ò–ú–£–õ–Ø–¢–û–† –°–ü–û–†–¢–ò–í–ù–û–ì–û –ú–ê–ì–ê–ó–ò–ù–ê")
        print("=" * 40)
        print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        print("2. üõí –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
        print("3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
        print("4. ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        print("5. üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
        print("6. üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
        print("7. üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("=" * 40)
    
    def add_to_cart(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        if not self.product_manager.products:
            print("‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
            
        self.product_manager.display_products()
        
        try:
            product_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: "))
            product = next((p for p in self.product_manager.products if p.id == product_id), None)
            
            if product:
                self.cart.add_product(product)
            else:
                print("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
    
    def remove_from_cart(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        if not self.cart.items:
            print("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        self.cart.display_cart()
        
        try:
            product_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: "))
            self.cart.remove_product(product_id)
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
    
    def sort_cart(self):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É"""
        if not self.cart.items:
            print("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        print("\n" + "=" * 40)
        print("–í–´–ë–û–† –ê–õ–ì–û–†–ò–¢–ú–ê –°–û–†–¢–ò–†–û–í–ö–ò")
        print("=" * 40)
        print("1. –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
        print("2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏")
        print("3. –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
        print("4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º")
        
        try:
            algo_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (1-4): "))
            if algo_choice not in [1, 2, 3, 4]:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
                return
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4")
            return
        
        print("\n" + "=" * 40)
        print("–ö–†–ò–¢–ï–†–ò–ô –°–û–†–¢–ò–†–û–í–ö–ò")
        print("=" * 40)
        print("1. –ü–æ —Ü–µ–Ω–µ")
        print("2. –ü–æ –≤–µ—Å—É")
        print("3. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("4. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        
        try:
            key_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (1-4): "))
            key_map = {1: 'price', 2: 'weight', 3: 'category', 4: 'name'}
            if key_choice not in key_map:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è")
                return
            key = key_map[key_choice]
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4")
            return
        
        try:
            order = input("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é? (–¥–∞/–Ω–µ—Ç): ").lower()
            reverse = order not in ['–¥–∞', '–¥', 'yes', 'y']
        except:
            reverse = False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        algo_map = {
            1: self.sort_manager.bubble_sort,
            2: self.sort_manager.insertion_sort,
            3: self.sort_manager.quick_sort,
            4: self.sort_manager.merge_sort
        }
        
        algorithm_names = ['–ü—É–∑—ã—Ä—å–∫–æ–≤—É—é', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—Å—Ç–∞–≤–∫–∞–º–∏', '–ë—ã—Å—Ç—Ä—É—é', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–∏—è–Ω–∏–µ–º']
        print(f"\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º {algorithm_names[algo_choice-1]} —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É...")
        
        algo_map[algo_choice](self.cart.items, key, reverse)
        
        print("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        self.cart.display_cart()
    
    def calculate_total(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
        if not self.cart.items:
            print("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        total = self.cart.get_total_price()
        print(f"\nüí∞ –ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total:.2f}‚ÇΩ")
        
        # –£—á–µ—Ç —Å–∫–∏–¥–æ–∫
        if total > 10000:
            discount = total * 0.1  # 10% —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10000‚ÇΩ
            final_price = total - discount
            print(f"üéÅ –°–∫–∏–¥–∫–∞ 10%: -{discount:.2f}‚ÇΩ")
            print(f"üíµ –ö –û–ü–õ–ê–¢–ï: {final_price:.2f}‚ÇΩ")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞...")
        
        while True:
            self.display_menu()
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ")
                
                if choice == '0':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫–∏!")
                    break
                elif choice == '1':
                    self.product_manager.display_products()
                elif choice == '2':
                    self.cart.display_cart()
                elif choice == '3':
                    self.add_to_cart()
                elif choice == '4':
                    self.remove_from_cart()
                elif choice == '5':
                    self.sort_cart()
                elif choice == '6':
                    self.cart.clear()
                elif choice == '7':
                    self.calculate_total()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 0 –¥–æ 7")
            
            except KeyboardInterrupt:
                print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if not os.path.exists('products.csv'):
        print("‚ùå –§–∞–π–ª 'products.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ 'create_products.py'")
    else:
        app = ShopSimulator()
        app.run()